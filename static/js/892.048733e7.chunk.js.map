{"version":3,"file":"static/js/892.048733e7.chunk.js","mappings":"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","sources":["Components/ThreeScene.jsx"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport * as THREE from 'three';\r\nimport { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\r\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js';\r\nimport './ThreeScene.css'; // Import CSS file\r\n\r\nconst ThreeScene = () => {\r\n    const sceneRef = useRef(null);\r\n\r\n\r\n    //let camera, scene, renderer, Chantrai, Chanphai, Bapchantrai, Bapchanphai;\r\n\r\n    useEffect(() => {\r\n        let camera, scene, renderer, Chantrai, Chanphai, Bapchantrai, Bapchanphai;\r\n        const init = () => {\r\n\r\n\r\n            // Khởi tạo scene, camera, renderer, và các biến cần thiết\r\n\r\n            camera = new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 0.01, 10);\r\n            camera.position.set(3, 3, 1);\r\n            camera.lookAt(0, 0, 0);\r\n\r\n            scene = new THREE.Scene();\r\n            scene.background = new THREE.Color(0x3A3B3C);\r\n\r\n            const light = new THREE.HemisphereLight(0xffffff, 0x444422);\r\n            light.position.set(0, 1, 0);\r\n            scene.add(light);\r\n\r\n            const mesh = new THREE.Mesh(\r\n                new THREE.PlaneGeometry(6, 6),\r\n                new THREE.MeshPhongMaterial({ color: 0x999999, depthWrite: false })\r\n            );\r\n\r\n            mesh.rotation.x = - Math.PI / 2;\r\n            mesh.receiveShadow = true;\r\n            scene.add(mesh);\r\n\r\n            const grid = new THREE.GridHelper(6, 20, 0x000000, 0x000000);\r\n            grid.material.opacity = 0.1;\r\n            grid.material.transparent = true;\r\n            scene.add(grid);\r\n            const maxContainerWidth = 1000;\r\n            const maxContainerHeight = 1000;\r\n            const scaleFactor = Math.min(maxContainerWidth / window.innerWidth, maxContainerHeight / window.innerHeight);\r\n            // ... (thêm code khởi tạo)\r\n\r\n            // Khởi tạo GLTFLoader và tải model\r\n            const loader = new GLTFLoader();\r\n            loader.load('https://raw.githubusercontent.com/AnhKiet259/Test3D/master/mohinh.glb', (gltf) => {\r\n                // Xử lý mô hình 3D\r\n                const model = gltf.scene;\r\n\r\n                // ... (thêm code xử lý mô hình)\r\n                console.log(model);\r\n\r\n                model.traverse((o) => {\r\n                    if (o.isMesh) {\r\n                        o.material.metalness = false;\r\n                        o.material.wireframe = false;\r\n                        o.castShadow = true;\r\n                        o.receiveShadow = true;\r\n                    }\r\n                });\r\n\r\n                const SkinnedMesh = model.children[0].children[1];\r\n                scene.add(model);\r\n\r\n                // Thêm mô hình vào scene\r\n                const Skeleton = SkinnedMesh.skeleton;\r\n                const SkeletonHelper = new THREE.SkeletonHelper(Skeleton.bones[0]);\r\n                SkeletonHelper.skeleton = Skeleton;\r\n                SkeletonHelper.visible = true;\r\n                scene.add(SkeletonHelper);\r\n\r\n                const Bones = SkinnedMesh.skeleton.bones;\r\n                Chantrai = Bones.find((bone) => bone.name === 'mixamorigLeftUpLeg');\r\n                Chanphai = Bones.find((bone) => bone.name === 'mixamorigRightUpLeg');\r\n                Bapchantrai = Bones.find((bone) => bone.name === 'mixamorigLeftLeg');\r\n                Bapchanphai = Bones.find((bone) => bone.name === 'mixamorigRightLeg');\r\n\r\n                // async function layDuLieu() {\r\n                //     try {\r\n                //         const response = await fetch('http://localhost:1880/bye2');\r\n                //         const DUITRAI = parseFloat(data.DUITRAI);\r\n                //         const DUIPHAI = parseFloat(data.DUIPHAI);\r\n                //         const BAPCHANTRAI = parseFloat(data.BAPCHANTRAI);\r\n                //         const BAPCHANPHAI = parseFloat(data.BAPCHANPHAI);\r\n                //         Chantrai.rotation.x = DUITRAI;\r\n                //         Chanphai.rotation.x = DUIPHAI;\r\n                //         Bapchantrai.rotation.x = BAPCHANTRAI;\r\n                //         Bapchanphai.rotation.x = BAPCHANPHAI;\r\n                //     } catch (error) {\r\n                //         console.error('Lỗi khi lấy dữ liệu:', error);\r\n                //     }\r\n                // }\r\n                // setInterval(layDuLieu, 10);\r\n\r\n\r\n                async function fetchData() {\r\n                    fetch('https://asia-south1.gcp.data.mongodb-api.com/app/application-0-iatxy/endpoint/TEST_GET')\r\n                        .then(response => {\r\n                            if (!response.ok) {\r\n                                throw new Error('Network response was not ok');\r\n                            }\r\n                            return response.json();\r\n                        })\r\n                        .then(data => {\r\n                            //const apiDataDiv = document.getElementById('apiData');\r\n\r\n\r\n                            const DUITRAI = data[0].public.output.jsonData.Roll_dui_trai_moi;\r\n                            const BAPCHANTRAI = data[0]?.public?.output?.jsonData?.Roll_bap_chan_trai_moi;\r\n                            const DUIPHAI = data[0]?.public?.output?.jsonData?.Roll_dui_phai_moi;\r\n                            const BAPCHANPHAI = data[0]?.public?.output?.jsonData?.Roll_bap_chan_phai_moi;\r\n                            Chantrai.rotation.x = DUITRAI;\r\n                            Chanphai.rotation.x = DUIPHAI;\r\n                            Bapchantrai.rotation.x = BAPCHANTRAI;\r\n                            Bapchanphai.rotation.x = BAPCHANPHAI;\r\n\r\n\r\n                        })\r\n                        .catch(error => {\r\n                            console.error('There was a problem with the fetch operation:', error);\r\n                        });\r\n                }\r\n\r\n                fetchData();\r\n                setInterval(fetchData, 100);\r\n                // Cập nhật scene khi model đã được tải\r\n                sceneRef.current.add(scene);\r\n\r\n                // Khởi tạo OrbitControls\r\n                const controls = new OrbitControls(camera, sceneRef.current);\r\n                controls.target.set(0, 1, 0);\r\n                controls.update();\r\n            });\r\n\r\n            // Khởi tạo renderer và thêm vào DOM\r\n            renderer = new THREE.WebGLRenderer({ antialias: true });\r\n            renderer.setPixelRatio(window.devicePixelRatio);\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n            renderer.outputEncoding = THREE.sRGBEncoding;\r\n            renderer.shadowMap.enabled = true;\r\n            renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n            sceneRef.current.appendChild(renderer.domElement);\r\n            const onWindowResize = () => {\r\n                camera.aspect = window.innerWidth / window.innerHeight;\r\n                camera.updateProjectionMatrix();\r\n                // Thu nhỏ kích thước của renderer lại 1/2\r\n                renderer.setSize(window.innerWidth, window.innerHeight);\r\n            };\r\n\r\n            // Xử lý sự kiện thay đổi kích thước cửa sổ\r\n            window.addEventListener('resize', onWindowResize, false);\r\n\r\n            const controls = new OrbitControls(camera, renderer.domElement);\r\n            controls.target.set(0, 1, 0);\r\n            controls.update();\r\n\r\n            // Hàm xử lý thay đổi kích thước cửa sổ\r\n            // function onWindowResize() {\r\n            //     camera.aspect = window.innerWidth / window.innerHeight;\r\n            //     camera.updateProjectionMatrix();\r\n            //     renderer.setSize(window.innerWidth, window.innerHeight);\r\n            // }\r\n        };\r\n        // Hàm animate để tạo vòng lặp render\r\n        function animate() {\r\n            requestAnimationFrame(animate);\r\n            renderer.render(scene, camera);\r\n        };\r\n\r\n        // Gọi hàm animate để bắt đầu vòng lặp render\r\n        init();\r\n        animate();\r\n\r\n        // Cleanup\r\n        return () => {\r\n            //window.removeEventListener('resize', onWindowResize);\r\n            if (renderer && renderer.domElement) {\r\n                renderer.domElement.remove();\r\n            }\r\n        };\r\n    }, []); // Chỉ chạy một lần khi component được mount\r\n\r\n    return <div className=\"three-scene-wrapper\" ref={sceneRef}></div>;\r\n};\r\n\r\nexport default ThreeScene;\r\n"],"names":["ThreeScene","sceneRef","useRef","useEffect","camera","scene","renderer","Chantrai","Chanphai","Bapchantrai","Bapchanphai","init","THREE","window","innerWidth","innerHeight","position","set","lookAt","background","light","add","mesh","color","depthWrite","rotation","x","Math","PI","receiveShadow","grid","material","opacity","transparent","min","GLTFLoader","load","gltf","model","console","log","traverse","o","isMesh","metalness","wireframe","castShadow","SkinnedMesh","children","Skeleton","skeleton","SkeletonHelper","bones","visible","Bones","async","fetchData","fetch","then","response","ok","Error","json","data","_data$","_data$$public","_data$$public$output","_data$$public$output$","_data$2","_data$2$public","_data$2$public$output","_data$2$public$output2","_data$3","_data$3$public","_data$3$public$output","_data$3$public$output2","DUITRAI","public","output","jsonData","Roll_dui_trai_moi","BAPCHANTRAI","Roll_bap_chan_trai_moi","DUIPHAI","Roll_dui_phai_moi","BAPCHANPHAI","Roll_bap_chan_phai_moi","catch","error","find","bone","name","setInterval","current","controls","OrbitControls","target","update","antialias","setPixelRatio","devicePixelRatio","setSize","outputEncoding","shadowMap","enabled","type","appendChild","domElement","addEventListener","onWindowResize","aspect","updateProjectionMatrix","animate","requestAnimationFrame","render","remove","_jsx","className","ref"],"sourceRoot":""}