{"version":3,"file":"static/js/513.22133d63.chunk.js","mappings":"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","sources":["Components/CreateAccAdmin.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport \"./CreateAccAdmin.css\";\r\nimport logore from './usav.png';\r\nimport axios from 'axios';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\n\r\n\r\nconst isEmptyValue = (value) => {\r\n    return !value || value.trim().length < 1;\r\n};\r\n\r\nexport default function CreateAccAdmin({ }) {\r\n\r\n    const [formValue, setFormValue] = useState({});\r\n    const [formError, setFormError] = useState({});\r\n    const [modalVisible1, setModalVisible1] = useState(false);\r\n    const [modalVisible2, setModalVisible2] = useState(false);\r\n\r\n    const toggleModal1 = () => {\r\n        setModalVisible1(!modalVisible1); // Toggle the modal visibility state\r\n    };\r\n    const toggleModal2 = () => {\r\n        setModalVisible2(!modalVisible2); // Toggle the modal visibility state\r\n    };\r\n\r\n    const validateForm = () => {\r\n        const error = {};\r\n\r\n        if (isEmptyValue(formValue.username) || isEmptyValue(formValue.firstname)\r\n            || isEmptyValue(formValue.lastname)\r\n            || isEmptyValue(formValue.email) || isEmptyValue(formValue.phone)\r\n            || isEmptyValue(formValue.password)) {\r\n            toggleModal1();\r\n            error[\"password\"] = \"Error: Please Fill All Information\";\r\n        }\r\n        setFormError(error);\r\n        return Object.keys(error).length === 0;\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        const { value, name } = event.target;\r\n        setFormValue({\r\n            ...formValue,\r\n            [name]: value,\r\n            date: new Date().toISOString()\r\n        });\r\n    };\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        const currentDate = new Date();\r\n        const formattedDate = currentDate.toISOString();\r\n\r\n        if (validateForm()) {\r\n            try {\r\n\r\n                const userData = {\r\n                    username: formValue.username,\r\n                    firstname: formValue.firstname,\r\n                    lastname: formValue.lastname,\r\n                    birthdate: formValue.birthdate,\r\n                    email: formValue.email,\r\n                    phone: formValue.phone,\r\n                    password: formValue.password,\r\n                    date: formattedDate,\r\n                    role: 0,\r\n                };\r\n                const response = await axios.post('https://asia-south1.gcp.data.mongodb-api.com/app/application-0-iatxy/endpoint/Log_in', userData);\r\n\r\n                console.log('Đã gửi dữ liệu thành công:', response.data);\r\n                // Xóa thông tin trong form sau khi gửi thành công\r\n                setFormValue({\r\n                    username: '',\r\n                    firstname: '',\r\n                    lastname: '',\r\n                    birthdate: '',\r\n                    email: '',\r\n                    phone: '',\r\n                    password: '',\r\n                });\r\n                toggleModal2();\r\n                // Thực hiện các xử lý tiếp theo, ví dụ: chuyển hướng, hiển thị thông báo thành công, vv.\r\n            } catch (error) {\r\n                console.error('Lỗi khi gửi dữ liệu:', error);\r\n                // Xử lý lỗi và hiển thị thông báo lỗi\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    console.log(formError);\r\n\r\n    return (\r\n        <div class=\"container43 login-formz\">\r\n            <div class=\"left-column login1001-pic\">\r\n                <img src={logore} style={{ width: '80%' }} alt='Logo' />\r\n            </div>\r\n            <div class=\"right-column\">\r\n                <div class=\"limiter \" >\r\n                    <form onSubmit={handleSubmit}>\r\n                        <h1 style={{ textAlign: 'center', marginBottom: '30px', color: '#A2A0A0' }}>Create Admin</h1>\r\n                        <div class=\"form-groupz\">\r\n                            <input className=\"textz\" id=\"username\" name=\"username\"\r\n                                placeholder=\"Username\" value={formValue.username} onChange={handleChange} />\r\n                        </div>\r\n                        <div class=\"form-groupz\">\r\n                            <div style={{ display: 'flex' }}>\r\n                                <input\r\n                                    className=\"textz\"\r\n                                    id=\"firstname\"\r\n                                    name=\"firstname\"\r\n                                    placeholder=\"First Name\"\r\n                                    value={formValue.firstname}\r\n                                    onChange={handleChange}\r\n                                />\r\n                                <input\r\n                                    className=\"textz\"\r\n                                    id=\"lastname\"\r\n                                    name=\"lastname\"\r\n                                    placeholder=\"Last Name\"\r\n                                    style={{ marginLeft: '10px' }}\r\n                                    value={formValue.lastname}\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"form-groupz\">\r\n                            <input className=\"textz\" id=\"email\" name=\"email\"\r\n                                placeholder=\"Email\" value={formValue.email} onChange={handleChange} />\r\n                        </div>\r\n\r\n                        <div class=\"form-groupz\">\r\n                            <div style={{ display: 'flex' }}>\r\n                                <DatePicker\r\n                                    className=\"textz\"\r\n                                    id=\"birthdate\"\r\n                                    name=\"birthdate\"\r\n                                    placeholderText=\"Date of Birth\"\r\n                                    selected={formValue.birthdate}\r\n                                    onChange={(date) => {\r\n                                        const formattedDate = date.toISOString();\r\n                                        setFormValue((prevFormValue) => ({\r\n                                            ...prevFormValue,\r\n                                            birthdate: formattedDate,\r\n                                        }));\r\n                                    }}\r\n                                />\r\n                                <input className=\"textz\" id=\"phone\" name=\"phone\"\r\n                                    placeholder=\"Phone\" style={{ marginLeft: '10px' }} value={formValue.phone} onChange={handleChange} />\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"form-groupz\">\r\n                            <input className=\"textz\" type=\"password\" id=\"password\" name=\"password\"\r\n                                placeholder=\"Password\" value={formValue.password} onChange={handleChange} />\r\n                        </div>\r\n\r\n                        {/* {formError.password && (\r\n                            <div className=\"error-feedback\">{formError.password}</div>\r\n                        )} */}\r\n                        {modalVisible1 && (\r\n                            <div className=\"modal\">\r\n                                <div className=\"modal-content\">\r\n                                    <i class=\"uil uil-annoyed modalicon\" style={{ width: \"200px\" }}></i>\r\n                                    <h2>Lưu Ý</h2>\r\n                                    <p>Vui lòng điền đầy đủ thông tin Admin</p>\r\n                                    <button className=\"modal-close\" onClick={toggleModal1}>\r\n                                        Đóng\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                        {modalVisible2 && (\r\n                            <div className=\"modal\">\r\n                                <div className=\"modal-content\">\r\n                                    <i class=\"uil uil-check-circle modalicon\" style={{ width: \"200px\", color: 'green' }}></i>\r\n                                    <h2>Thành Công</h2>\r\n                                    <p>Bạn đã tạo tài khoản Admin thành công !</p>\r\n                                    <button className=\"modal-close\" onClick={toggleModal2}>\r\n                                        Đóng\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n\r\n\r\n                        <div style={{ textAlign: \"center\", paddingBottom: '10px' }}>\r\n                            <a style={{\r\n                                color: 'white',\r\n                                fontSize: '10px',\r\n                                transition: '0.3s',\r\n                                cursor: 'pointer',\r\n                            }}\r\n                                onMouseEnter={(e) => e.target.style.color = '#43d2e8'}\r\n                                onMouseLeave={(e) => e.target.style.color = 'white'}\r\n                            >\r\n                                -- Role Account: Admin --\r\n                            </a>\r\n                        </div>\r\n                        <div style={{ textAlign: 'center', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n                            <button style={{ width: '60%' }} className='buttonz' type=\"submit\">Create</button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div >\r\n        </div >\r\n    );\r\n}"],"names":["isEmptyValue","value","trim","length","CreateAccAdmin","_ref","formValue","setFormValue","useState","formError","setFormError","modalVisible1","setModalVisible1","modalVisible2","setModalVisible2","toggleModal1","toggleModal2","handleChange","event","name","target","date","Date","toISOString","console","log","_jsxs","class","children","_jsx","src","logore","style","width","alt","onSubmit","async","preventDefault","formattedDate","validateForm","error","username","firstname","lastname","email","phone","password","Object","keys","userData","birthdate","role","response","axios","post","data","textAlign","marginBottom","color","className","id","placeholder","onChange","display","marginLeft","DatePicker","placeholderText","selected","prevFormValue","type","onClick","paddingBottom","fontSize","transition","cursor","onMouseEnter","e","onMouseLeave","justifyContent","alignItems"],"sourceRoot":""}